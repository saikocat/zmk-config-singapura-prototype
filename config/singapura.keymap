// Copyright 2023 saikocat (@saikocat)
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC RSHFT LSHFT>;
};

/ {
    behaviors {
        skq: sticky_key_quick_release {
            label = "STICKY_KEY_QUICK_RELEASE";
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <2000>;
            quick-release;
            ignore-modifiers;

        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings =
                <&kp>,
                <&kp>;
        };
    };
}
;{
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <13 12>;
        };

        combo_exclaimation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <2 1>;
        };

        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <0 2>;
        };

        combo_dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <0 4>;
        };

        combo_percent {
            bindings = <&kp PERCENT>;
            key-positions = <1 3>;
        };

        combo_ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <17 16>;
        };

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <18 16>;
        };

        combo_asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <18 17>;
        };

        combo_left_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <6 7>;
        };

        combo_right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 8>;
        };

        combo_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <6 5>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <4 3>;
        };

        combo_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <23 24>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <14 13>;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <25 26>;
        };

        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <15 16>;
        };

        combo_single_quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <9 8>;
        };

        combo_double_quote {
            bindings = <&kp APOSTROPHE>;
            key-positions = <9 18 17>;
        };

        combo_question {
            bindings = <&kp QUESTION>;
            key-positions = <17 16 18>;
        };

        combo_comma {
            bindings = <&kp COMMA>;
            key-positions = <15 6 7>;
        };

        combo_dot {
            bindings = <&kp DOT>;
            key-positions = <8 7 16>;
        };

        combo_left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <28 27>;
        };

        combo_right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <29 28>;
        };

        combo_backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <19 18>;
        };

        combo_left_option {
            bindings = <&kp LEFT_ALT>;
            key-positions = <20 32>;
        };

        combo_left_control {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <30 20>;
        };

        combo_Downloads_folder {
            bindings = <&kp LA(Z)>;
            key-positions = <20 21 32>;
        };

        combo_enter_left {
            bindings = <&kp ENTER>;
            key-positions = <1 2 3>;
        };

        combo_enter_right {
            bindings = <&kp ENTER>;
            key-positions = <8 7 6>;
        };

        combo_space_1 {
            bindings = <&kp SPACE>;
            key-positions = <0 1 2>;
        };

        combo_media_next {
            bindings = <&kp C_FF>;
            key-positions = <22 13>;
        };

        combo_media_previous {
            bindings = <&kp C_REWIND>;
            key-positions = <21 10>;
        };

        combo_volume_up {
            bindings = <&kp K_VOLUME_UP>;
            key-positions = <22 23>;
        };

        combo_volume_down {
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <20 21>;
        };

        combo_mute {
            bindings = <&kp C_MUTE>;
            key-positions = <22 21 20>;
        };

        combo_colon {
            bindings = <&kp COLON>;
            key-positions = <26 27 28>;
        };

        combo_semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <25 26 27>;
        };

        combo_reopen_tab {
            bindings = <&kp LS(LG(T))>;
            key-positions = <20 31 4>;
        };

        combo_at_sign {
            bindings = <&kp AT_SIGN>;
            key-positions = <11 12 13>;
        };

        combo_space_2 {
            bindings = <&kp SPACE>;
            key-positions = <14 13 12>;
        };

        combo_media_play {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <21 22>;
        };

        combo_up {
            bindings = <&kp UP_ARROW>;
            key-positions = <18 27>;
        };

        new_combo {
            bindings = <&kp UP_ARROW>;
            key-positions = <18 29>;
        };

        combo_slash {
            bindings = <&kp SLASH>;
            key-positions = <9 8 17>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_base {
            label = "BASE";
            bindings = <
    &kp Q   &kp W           &kp E              &kp R           &kp T     &kp Y      &kp U     &kp I     &kp O      &kp P
    &kp A   &kp S           &kp D              &kp F           &kp G     &kp H      &kp J     &kp K     &kp L      &mo 2
  &lt 1 Z   &kp X           &kp C              &kp V           &kp B     &kp N      &kp M  &kp LEFT  &kp DOWN  &kp RIGHT
                   &lt 1 LEFT_ALT  &skq LEFT_COMMAND  &kp LEFT_SHIFT     &mo 1  &kp SPACE  &kp RALT
&kp SPACE  &kp UP        &kp LEFT          &kp RIGHT        &kp DOWN  &kp DOWN  &kp RIGHT  &kp LEFT    &kp UP  &kp SPACE
            >;
        };

        layer_1 {
            bindings = <
  &kp NUMBER_1      &kp NUMBER_2          &kp NUMBER_3         &kp N4       &kp NUMBER_5    &kp NUMBER_6     &kp NUMBER_7           &kp N8     &kp NUMBER_9              &kp N0
&kp LEFT_ARROW      &kp UP_ARROW        &kp DOWN_ARROW      &kp RIGHT  &skq LEFT_COMMAND  &kp RS(RG(N4))  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &skq RIGHT_COMMAND
  &kp LA(LEFT)  &kp LEFT_CONTROL  &kp LS(LG(NUMBER_4))  &kp LA(RIGHT)      &kp LA(LG(V))     &kp RC(TAB)  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3     &kp RIGHT_SHIFT
                                                &trans         &trans             &trans       &kp ENTER       &kp PERIOD        &kp KP_N0
        &trans            &trans                &trans         &trans             &trans          &trans           &trans           &trans           &trans              &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp UP_ARROW     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT      &kp DOWN  &kp RIGHT  &trans
&trans  &trans  &trans  &trans   &mo 3  &trans    &trans        &trans     &trans  &trans
                &trans  &trans  &trans  &trans    &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans        &trans     &trans  &trans
            >;
        };

        layer_3 {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &trans  &trans  &trans
      &trans        &trans        &trans    &bt BT_PRV    &bt BT_NXT  &trans  &trans  &trans  &trans  &trans
      &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
                                  &trans        &trans    &bt BT_CLR  &trans  &trans  &trans
      &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};

// vim: ft=dts et
